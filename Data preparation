require(tidyverse)
require(igraph)
library(readr)
library(taRifx)
library(sjmisc)

'%ni%' <- Negate('%in%')

splitter <- function(x){strsplit(x," ")[[1]] %>% as.vector()}
X2011$X2 <- sapply(X2011$X2, splitter)
X2011$X1 <- as.character(X2011$X1)

data2011 <- data.frame("from" = character(0), 
                       "to" = character(0),
                       stringsAsFactors = FALSE)
for (i in 1:length(X2011$X1)){
  temp_df <- expand.grid(X2011$X1[i][[1]], X2011$X2[i][[1]])
  colnames(temp_df) <- c("from", "to")
  data2011 <- rbind(data2011, temp_df)
}

X2021$X2 <- sapply(X2021$X2, splitter)
X2021$X1 <- as.character(X2021$X1)
data2021 <- data.frame("from" = character(0), 
                       "to" = character(0),
                       stringsAsFactors = FALSE)
for (i in 1:length(X2021$X1)){
  temp_df <- expand.grid(X2021$X1[i][[1]], X2021$X2[i][[1]], stringsAsFactors = FALSE)
  colnames(temp_df) <- c("from", "to")
  data2021 <- rbind(data2021, temp_df)
}

data2011<-remove.factors(data2011)

data2011<-data2011[,c("to","from")]
data2021<-data2021[,c("to","from")]
colnames(data2011) <- c("from","to")
colnames(data2021) <- c("from","to")

names2011 <- read_delim("clean2011_v3.csv", 
                        +     ";", escape_double = FALSE, col_names = c("id","name"), 
                        +     col_types = cols(X1 = col_character()), 
                        +     trim_ws = TRUE)
names2021 <- read_delim("clean2021_v2.csv", 
                        +     ";", escape_double = FALSE, col_names = c("id","name"), 
                        +     col_types = cols(X1 = col_character()), 
                        +     trim_ws = TRUE)


data2011_n <- data2011[which((data2011$from %in% names2011$id)|(data2011$to %in% names2011$id)),]
data2021_n <- data2021[which((data2021$from %in% names2021$id)|(data2021$to %in% names2021$id)),]

for (i in 1:length(data2011_n$from)) {
  if ((data2011_n$from[i] %in% names2011$id)&(data2011_n$to[i] %in% names2011$id)){next}
  else if (data2011_n$from[i] %ni% names2011$id){data2011_n$from[i] <- NA}
  else {data2011_n$to[i] <- NA}
}

for (i in 1:length(data2021_n$from)) {
  if ((data2021_n$from[i] %in% names2021$id)&(data2021_n$to[i] %in% names2021$id)){print(i)}
  else if (data2021_n$from[i] %ni% names2021$id){data2021_n$from[i] <- NA}
  else {data2021_n$to[i] <- NA}
}

law_new<-graph_from_data_frame(data2021_n, directed = TRUE) %>% simplify()
law_old<-graph_from_data_frame(data2011_n, directed = TRUE) %>% simplify()

# setting attributes

colnames(names2021) <- c("id", "act")
colnames(names2011) <- c("id", "act")

ungraph_new <- igraph::as_data_frame(law_new, 'both')
ungraph_new$vertices$name <- as.double(ungraph_new$vertices$name)
ungraph_new$vertices <- ungraph_new$vertices %>% 
  left_join(names2021, c('name'='id'))
ungraph_new$vertices$type <- NA

for(i in 1:nrow(ungraph_new$vertices)){
  if (ungraph_new$vertices$name[i] %in% c(10103000)){
    ungraph_new$vertices$type[i] <- "const"
  }else if (ungraph_new$vertices$name[i] %in% c(1306500, 10105807, 10108000, 10164072, 
                                                10200300, 10900200, 12112604, 12124624, 12125178, 
                                                12125267, 12125268, 12127526, 12128809, 12138258, 
                                                12138291, 12147594, 12150845)){
    ungraph_new$vertices$type[i] <- "code"
    } else if (str_contains(ungraph_new$vertices$act[i], "федеральный закон", ignore.case = TRUE)){
    ungraph_new$vertices$type[i] <- "fed_law"
    } else if (str_contains(ungraph_new$vertices$act[i], "федеральный конституционный закон", ignore.case = TRUE)){
     ungraph_new$vertices$type[i] <- "fed_const_law"
    } else{
    ungraph_new$vertices$type[i] <- "other"
  }
}

for(i in 1:nrow(ungraph_new$vertices)){
  if (str_contains(ungraph_new$vertices$act[i], c("правовой анализ","комментарий"), 
                   ignore.case = TRUE, logic = "OR")){ungraph_new$vertices[-i,]}
    }

law_new_labels <- graph_from_data_frame(ungraph_new$edges,
                                   directed = TRUE,
                                   vertices = ungraph_new$vertices)
law_new_labels <- simplify(law_new_labels)
set_vertex_attr(law_new_labels, "act", index = V(law_new_labels), ungraph_new$vertices$act)
set_vertex_attr(law_new_labels, "type", index = V(law_new_labels), ungraph_new$vertices$type)
law_new_labels<-delete_vertices(law_new_labels, c(1))
vertex_attr(law_new_labels, "degree") <- degree(law_new_labels, v = V(law_new_labels), mode = c("in"))
